import{_ as s,c as a,a2 as e,o as t}from"./chunks/framework.wtg6z0M2.js";const c=JSON.parse('{"title":"QuantLib Period Class","description":"QuantLib Period class provides a Period (length + TimeUnit) class and implements a limited algebra","frontmatter":{"title":"QuantLib Period Class","description":"QuantLib Period class provides a Period (length + TimeUnit) class and implements a limited algebra","head":[["meta",{"property":"og:title","content":"QuantLib Period Class"}],["meta",{"property":"og:description","content":"QuantLib Period class provides a Period (length + TimeUnit) class and implements a limited algebra"}],["meta",{"property":"og:image","content":"/images/QuantLib.jpg"}],["meta",{"property":"og:url","content":"https://haun84.github.io/quantlib/period"}]]},"headers":[],"relativePath":"quantlib/period.md","filePath":"en/quantlib/period.md","lastUpdated":null}'),n={name:"quantlib/period.md"};function l(h,i,o,p,r,d){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="quantlib-period-class" tabindex="-1">QuantLib: Period Class <a class="header-anchor" href="#quantlib-period-class" aria-label="Permalink to &quot;QuantLib: Period Class&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">Language</p><ul><li><a href="/ko/quantlib/period">한국어 페이지: Korean Page</a></li></ul></div><p><code>Period</code> class provides a Period (<code>length</code> + <code>TimeUnit</code>) class and implements a limited algebra</p><h2 id="period-class-overview" tabindex="-1">Period Class Overview <a class="header-anchor" href="#period-class-overview" aria-label="Permalink to &quot;Period Class Overview&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">Period Class</p><ul><li><p>All <code>derivatives</code> basically require various date information about the <code>product</code>, such as <code>effective date</code>, <code>maturity date</code>, <code>settlement date</code>, <code>interest payment date</code>, etc.</p></li><li><p>These information are not only basic components of <code>derivatives</code>, but also can vary in <code>price</code> depending on how they are defined, so these details are very detailed in the <code>transaction statement</code> for trading <code>derivatives</code>.</p></li><li><p>The reason this date information is needed is essentially to determine how long a <code>product</code> has to expire or how long it has until the interest payment date.</p></li><li><p>In other words, what we should be interested in for <code>pricing</code> or <code>position management</code> is actually the period, not the date.</p></li><li><p>In other words, it means that the relative section is more important than the absolute time point, and our perspective should focus on the line rather than the point.</p></li></ul></div><h2 id="period-class-structure" tabindex="-1">Period Class Structure <a class="header-anchor" href="#period-class-structure" aria-label="Permalink to &quot;Period Class Structure&quot;">​</a></h2><p>If the <code>Date</code> class exists to define a <code>specific date</code>, the <code>Period</code> class exists to define a <code>specific period</code>. The <code>Period</code> class is not intended to define a viewpoint accurately, but to determine a period between the viewpoint and the viewpoint. In order to use the <code>Period</code> class, the following <code>structure</code> must be followed.</p><h3 id="period-class-construction-1" tabindex="-1">Period Class Construction #1 <a class="header-anchor" href="#period-class-construction-1" aria-label="Permalink to &quot;Period Class Construction #1&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ql.Period(Integer, TimeUnits)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">period </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Period(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ql.Months)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3M</span></span></code></pre></div><ul><li>The first method is to set an <code>integer</code> (<code>Integer</code>) and a <code>time unit</code> (<code>TimeUnits</code>) in the factor.</li><li>In the case of integers, you can enter a general number, but one thing to watch out for is time. There are various types of enumeration for different purposes in a QuantLib.</li><li>Enumeration refers to a data type that constitutes a set of a series of members, and a specific enumeration is the same as a group organized by a user for a certain purpose.</li><li>The time unit also has the following members as one of these enumeration rows.</li><li>For example, if you want to define a period of 3 months, you can enter 3 for the first factor and ql.Months for the second factor.</li></ul><div class="warning custom-block"><p class="custom-block-title">TimeUnits</p><ul><li>ql.Days</li><li>ql.Weeks</li><li>ql.Months</li><li>ql.Years</li></ul></div><h3 id="period-class-construction-2" tabindex="-1">Period Class Construction #2 <a class="header-anchor" href="#period-class-construction-2" aria-label="Permalink to &quot;Period Class Construction #2&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ql.Period(Frequency)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">period </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Period(ql.Semiannual)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(period)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 6M</span></span></code></pre></div><ul><li>The second method of defining the Period class is a method of inputting a frequency into a factor.</li><li>In the QuantLib, the period is also made of an enumeration type, and the members below are the members constituting the enumeration type.</li><li>These cycle enumerators are frequently used to implement products such as interest rate swaps and currency swaps that pay interest on a specific cycle.</li></ul><div class="warning custom-block"><p class="custom-block-title">Frequency</p><ul><li>ql.Annual</li><li>ql.Semiannual</li><li>ql.Quarterly</li><li>ql.Monthly</li><li>ql.Biweekly</li><li>ql.Daily</li><li>ql.Once</li></ul></div><h2 id="period-class-functions" tabindex="-1">Period Class Functions <a class="header-anchor" href="#period-class-functions" aria-label="Permalink to &quot;Period Class Functions&quot;">​</a></h2><p>The main <code>feature</code> of the <code>Period</code> class is that it is combined with <code>Date</code> to enable arithmetical operation for dates. For example, let&#39;s say you&#39;re curious about a date <code>three weeks</code>, <code>three months</code>, or <code>three years</code> from April 10, 2024.</p><p>These questions can be answered very easily by combining the <code>Date</code> class and the <code>Period</code> class. This function of adding and subtracting a <code>specific period</code> of time to a date is one of the useful functions of <code>QuantLib</code>. This <code>arithmetic calculation</code> is also possible between dates, which provides an answer to the period between dates.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Functions</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Date(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Date(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;After 3 Weeks : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Period(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ql.Weeks)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;After 3 Months : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Period(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ql.Months)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;After 3 Years : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Period(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ql.Years)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Days between Date2 and Date1 = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Output</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## After 3 Weeks : May 1st, 2024   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## After 3 Months : July 10th, 2024</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## After 3 Years : April 10th, 2027</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Days between Date2 and Date1 = 265</span></span></code></pre></div>`,19)]))}const u=s(n,[["render",l]]);export{c as __pageData,u as default};
