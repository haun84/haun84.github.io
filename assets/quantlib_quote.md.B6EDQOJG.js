import{_ as s,c as i,a2 as a,o as t}from"./chunks/framework.wtg6z0M2.js";const k=JSON.parse('{"title":"QuantLib Quote Class","description":"QuantLib Quote class and its subclasses such as SimpleQuote class serve to objectify market underlying assets as an observable according to the observer pattern.","frontmatter":{"title":"QuantLib Quote Class","description":"QuantLib Quote class and its subclasses such as SimpleQuote class serve to objectify market underlying assets as an observable according to the observer pattern.","head":[["meta",{"property":"og:title","content":"QuantLib Quote Class"}],["meta",{"property":"og:description","content":"QuantLib Quote class and its subclasses such as SimpleQuote class serve to objectify market underlying assets as an observable according to the observer pattern."}],["meta",{"property":"og:image","content":"/images/QuantLib.jpg"}],["meta",{"property":"og:url","content":"https://haun84.github.io/quantlib/quote"}]]},"headers":[],"relativePath":"quantlib/quote.md","filePath":"en/quantlib/quote.md","lastUpdated":null}'),n={name:"quantlib/quote.md"};function l(o,e,r,h,c,d){return t(),i("div",null,e[0]||(e[0]=[a(`<h1 id="quantlib-quote-class" tabindex="-1">QuantLib: Quote Class <a class="header-anchor" href="#quantlib-quote-class" aria-label="Permalink to &quot;QuantLib: Quote Class&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">Language</p><ul><li><a href="/ko/quantlib/quote">한국어 페이지: Korean Page</a></li></ul></div><p><code>Quote class</code> and its subclasses such as <code>SimpleQuote class</code> serve to objectify market <code>underlying assets</code> as an <code>observable</code> according to the <code>observer pattern</code>.</p><h2 id="derivatives-and-pricing" tabindex="-1">Derivatives and Pricing <a class="header-anchor" href="#derivatives-and-pricing" aria-label="Permalink to &quot;Derivatives and Pricing&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">Derivatives and Pricing</p><ul><li><p>The essential purpose of financial engineering is to <code>pricing derivatives</code>.</p></li><li><p><code>Derivatives</code> literally means a product whose value is <code>derived</code> by <code>changing the price of an underlying asset</code>.</p></li><li><p>Therefore, the relationship between <code>underlying assets</code> and <code>derivatives</code> can be contrasted with <code>inputs</code> and <code>outputs</code> from functions.</p></li><li><p>This is because the <code>theoretical value of derivatives</code> automatically changes as the price of the <code>underlying asset changes</code>, just as the <code>output value</code> changes accordingly when the <code>input variable changes</code>.</p><blockquote><p>Input: Underlying assets -&gt; Function: Pricing mechanism -&gt; Output: Derivatives value</p></blockquote></li><li><p>And <code>pricing</code> refers to the work of measuring in a reasonable way how much the theoretical value of a derivative will be under the current market conditions.</p></li><li><p>In other words, pricing is <code>recognizing changes in underlying assets</code> that affect derivatives and <code>calculating the value of derivatives</code> according to the situation.</p></li><li><p>In the end, it can be said that what is important for pricing derivatives is to immediately recognize market changes and reflect them in the pricing process in real time.</p></li></ul></div><h2 id="characteristics-of-quantlib-design-structure-observer-pattern" tabindex="-1">Characteristics of QuantLib Design Structure: Observer Pattern <a class="header-anchor" href="#characteristics-of-quantlib-design-structure-observer-pattern" aria-label="Permalink to &quot;Characteristics of QuantLib Design Structure: Observer Pattern&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">Observer Pattern</p><ul><li><p>At the time of design, QuantLib adopted <code>Observer pattern</code>, one of the <code>Design Patterns</code> frequently used in software engineering, as one of the main frameworks of QuantLib design structures in order to faithfully melt the essence of this pricing into QuantLib&#39;s framework.</p></li><li><p>The <code>Observer Pattern</code> refers to a software engineering implementation style to <code>automatically detect</code> and <code>reflect</code> a change when an external change occurs. Technically, it is a design pattern that registers a list of <code>Observers</code> that observes changes in the state of an object, and notifies each observer in the list directly through methods or the like whenever there is a state change.</p></li><li><p>A variety of software makes it easy to find this <code>Observer pattern</code>. A typical example of an <code>Observer pattern</code> is the phenomenon in which when a graph is drawn in Excel, the graph <code>automatically changes</code> according to the <code>data</code> it is viewing.</p></li><li><p>In other words, the <code>Observer pattern</code> plays a role in keeping an eye on the object to be observed and <code>changing all related factors</code> appropriately in real time when there is a <code>change</code> in it.</p></li><li><p>The <code>Observer pattern</code> is a design pattern that is highly optimized for the <code>pricing mechanism</code>. The reason is that, as mentioned earlier, <code>the essence of pricing</code> is to <code>detect changes in underlying assets</code> and <code>reflect them appropriately in real-time derivatives prices</code>. The designers of QuantLib established the framework of QuantLib by properly grasping the common denominator between software and financial engineering.</p></li></ul></div><div class="danger custom-block"><p class="custom-block-title">Observer and Observable</p><ul><li><p>QuantLib&#39;s <code>Observer pattern</code> is basically composed of two types: <code>Observer</code>, which observes changes, and <code>Observable</code>, which is observed.</p></li><li><p>In the QuantLib, the <code>Observer</code> and <code>Observable</code> are contrasted with the <code>pricing engine</code> and the <code>underlying assets</code>, respectively.</p></li><li><p>In the end, it is the underlying assets that affects the price of derivatives, so the <code>change in the underlying assets</code> must act as a trigger to alert the <code>pricing engine</code> for the <code>derivatives evaluation</code>.</p></li><li><p>As an <code>Observer</code>, the <code>pricing engine</code> should keep an eye on the <code>underlying assets to be observed</code> and immediately <code>reflect the change</code> in it to newly pricing the derivative.</p></li><li><p>QuantLib manages the pricing engine itself for evaluating derivatives in a class called <code>PricingEngine</code>, and each underlying assets starts with a class called <code>Quote</code> and builds up.</p></li><li><p>Because of the power of the <code>Observer pattern</code> inherent in this QuantLib structure, QuantLib has been able to establish itself as the best tool for financial engineering.</p></li></ul></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Example Observer Pattern</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> raiseFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">me </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.SimpleQuote(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Observer(raiseFlag)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs.registerWith(me)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">me.setValue(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Case 1: Observer was not notified of market element change&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs.unregisterWith(me)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">me.setValue(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Case 2: Observer was not notified of market element change&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="quote-class-overview" tabindex="-1">Quote Class Overview <a class="header-anchor" href="#quote-class-overview" aria-label="Permalink to &quot;Quote Class Overview&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">Beginning of Underlying Asset Implementation, Quote Class</p><ul><li><p><code>Derivatives</code> must have <code>underlying assets</code> on which the derivatives are based. Such as <code>stock price</code>, <code>interest rate</code>, <code>exchange rate</code>, and <code>volatility</code> are these underlying assets.</p></li><li><p>Before <code>implementing an underlying asset</code>, QuantLib always receives a specific <code>real value</code> and creates an underlying asset object based on it, and what is needed here is QuantLib&#39;s <code>Quote Class</code>.</p></li><li><p>There are several subclasses in the <code>Quote</code> class, but the most commonly used class is the <code>SimpleQuote</code> class. This <code>SimpleQuote</code> class is responsible for taking a specific <code>real number</code> as a factor and making it an <code>object</code>.</p></li><li><p>The <code>SimpleQuote</code> class is easy to understand if it is a small bowl containing a certain numerical value. In order for some numbers to serve as <code>underlying assets</code>, they must be contained in this <code>SimpleQuote</code> class.</p></li></ul></div><h2 id="quote-class-structure" tabindex="-1">Quote Class Structure <a class="header-anchor" href="#quote-class-structure" aria-label="Permalink to &quot;Quote Class Structure&quot;">​</a></h2><h3 id="simplequote-class" tabindex="-1">SimpleQuote Class <a class="header-anchor" href="#simplequote-class" aria-label="Permalink to &quot;SimpleQuote Class&quot;">​</a></h3><p>The structure of the <code>SimpleQuote</code> class is very simple. This is because you just need to enter the specific number you want in <code>ql.SimpleQuote()</code> as in the source code below.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Construction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">underlying_asset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.SimpleQuote(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">250.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="derivedquote-class" tabindex="-1">DerivedQuote Class <a class="header-anchor" href="#derivedquote-class" aria-label="Permalink to &quot;DerivedQuote Class&quot;">​</a></h3><p>Simple operations can be applied to values input through the <code>DerivedQuote</code> class.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.SimpleQuote(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.06</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ql.DerivedQuote(quoteHandle, function)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.DerivedQuote(ql.QuoteHandle(s), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d.value()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 0.6</span></span></code></pre></div><h2 id="quote-class-functions" tabindex="-1">Quote Class Functions <a class="header-anchor" href="#quote-class-functions" aria-label="Permalink to &quot;Quote Class Functions&quot;">​</a></h2><p>The functionality of the <code>SimpleQuote</code> class is also very simple.</p><ul><li><code>value()</code> method: returns the current value</li><li><code>setValue()</code> method: Change the value contained in the object to the value received</li><li><ul><li><code>isValid()</code> method: returns true if the Quote holds a valid value</li></ul></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Functions</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(underlying_asset.value())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 250.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">underlying_asset.setValue(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">260.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(underlying_asset.value())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 260.2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(underlying_asset.isValid()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># True</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">setValue() method</p><ul><li><p>The <code>setValue()</code> method, which simply changes the value, is very closely related to the <code>observer pattern</code>. As mentioned earlier, the <code>observer pattern</code> is a software engineering tool that functions to inform the <code>observer</code> immediately if there is a <code>change in the object of observation</code>.</p></li><li><p>However, in order for the <code>observer pattern</code> to work properly, it is necessary to change such a change and at the same time a <code>trigger notifying the observer</code>. This method called <code>setValue()</code> acts as a <code>trigger</code>.</p></li><li><p>Using this, the <code>derivatives</code> can immediately <code>recognize</code> that the <code>underlying asset has changed</code> without saying otherwise.</p></li><li><p>As such, QuantLib is trying to improve the efficiency of pricing through this <code>observer pattern</code> without explicitly informing us that a <code>change has occurred</code>. You will be able to understand its effectiveness through the introduction of the subsequent class.</p></li></ul></div>`,23)]))}const u=s(n,[["render",l]]);export{k as __pageData,u as default};
